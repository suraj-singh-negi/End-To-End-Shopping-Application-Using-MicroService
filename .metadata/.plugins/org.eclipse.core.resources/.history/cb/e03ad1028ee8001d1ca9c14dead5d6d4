package com.order.service;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.reactive.function.client.WebClient;

import com.order.dto.InventoryResponse;
import com.order.dto.OrderLineItemsDto;
import com.order.dto.OrderRequest;
import com.order.model.Order;
import com.order.model.OrderLineItems;
import com.order.respository.OrderRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
@Transactional
public class OrderService {
	
	private OrderRepository orderRepository;
	
	private WebClient.Builder webClientBuilder;
	
	private KafkaTemplate kafkaTemplate;

	public String placeOrder(OrderRequest orderRequest) {
		Order order = new Order();
		
		order.setOrderNumber(UUID.randomUUID().toString());
		
		List<OrderLineItems> orderLineItems = orderRequest.getOrderLineItemsDto()
			.stream().map(
				this::mapToDto
					).collect(Collectors.toList());
		
		order.setOrderLineItems(orderLineItems);
		
		List<String> skuCodes = order.getOrderLineItems().stream().map(OrderLineItems::getSkuCode).collect(Collectors.toList());
		
		InventoryResponse[] inventoryResponseArray = webClientBuilder.build().get()
					.uri("http://inventory-service/api/inventory",
							uriBuilder -> uriBuilder.queryParam("skuCode", skuCodes).build()
							)
					.retrieve()
					.bodyToMono(InventoryResponse[].class)
					.block();
		
		boolean allProductsInStock = Arrays.stream(inventoryResponseArray)
			.allMatch(InventoryResponse::isInStock);
		
		if(allProductsInStock) {
			orderRepository.save(order);
			kafkaTemplate.send("notificationTopic", order.getOrderNumber());
			return "order placed successfully";
		}else {
			throw new IllegalArgumentException("Product is not in stock");
		}
		
	}

	private OrderLineItems mapToDto(OrderLineItemsDto orderlineitemsdto) {
		OrderLineItems orderLineItems = new OrderLineItems();
		orderLineItems.setId(orderlineitemsdto.getId());
		orderLineItems.setPrice(orderlineitemsdto.getPrice());
		orderLineItems.setQuantity(orderlineitemsdto.getQuantity());
		orderLineItems.setSkuCode(orderlineitemsdto.getSkuCode());
		return orderLineItems;
	}
	
}